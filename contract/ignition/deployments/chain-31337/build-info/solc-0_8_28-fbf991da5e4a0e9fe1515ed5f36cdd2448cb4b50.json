{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-fbf991da5e4a0e9fe1515ed5f36cdd2448cb4b50",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/OpenPayAI.sol": "project/contracts/OpenPayAI.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "project/contracts/OpenPayAI.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract OpenPayAI {\n    struct Entry {\n        uint256 price;\n        address dataOwner;\n    }\n    address public immutable owner;\n    IERC20 public immutable paymentToken;\n    mapping(bytes32 => Entry) public entries;\n    mapping(address => mapping(bytes32 => bool)) public licenses;\n\n    event EntryAdded(bytes32 indexed hash, uint256 price, address dataOwner);\n    event PriceUpdated(bytes32 indexed hash, uint256 newPrice);\n    event LicenseBought(\n        address indexed buyer,\n        bytes32 indexed hash,\n        uint256 price\n    );\n    event Withdrawal(address indexed owner, uint256 amount);\n\n    constructor(address _owner, address _paymentToken) {\n        owner = _owner;\n        paymentToken = IERC20(_paymentToken);\n    }\n\n    modifier isOwner() {\n        require(msg.sender == owner, \"Not the Owner\");\n        _;\n    }\n    modifier isDataOwner(bytes32 hash) {\n        require(entries[hash].dataOwner == msg.sender, \"Not the data owner\");\n        _;\n    }\n\n    function addEntry(\n        bytes32 hash,\n        uint256 price,\n        address dataOwner\n    ) external isOwner {\n        require(entries[hash].dataOwner == address(0), \"Entry already exists\");\n\n        entries[hash] = Entry({price: price, dataOwner: dataOwner});\n\n        emit EntryAdded(hash, price, dataOwner);\n    }\n\n    function getEntry(bytes32 hash) external view returns (uint256, address) {\n        require(entries[hash].dataOwner != address(0), \"Entry does not exist\");\n\n        Entry memory entry = entries[hash];\n        return (entry.price, entry.dataOwner);\n    }\n\n    function buyLicense(bytes32 hash) external payable {\n        require(entries[hash].dataOwner != address(0), \"Entry does not exist\");\n\n        Entry memory entry = entries[hash];\n        uint256 price = entry.price;\n        address dataOwner = entry.dataOwner;\n\n        bool success = paymentToken.transferFrom(msg.sender, dataOwner, price);\n        require(success, \"Token transfer failed\");\n\n        licenses[msg.sender][hash] = true;\n\n        emit LicenseBought(msg.sender, hash, price);\n    }\n\n    function updatePrice(\n        bytes32 hash,\n        uint256 newPrice\n    ) external isDataOwner(hash) {\n        require(entries[hash].dataOwner != address(0), \"Entry does not exist\");\n\n        entries[hash].price = newPrice;\n\n        emit PriceUpdated(hash, newPrice);\n    }\n\n    function withdraw(uint256 amount) external isOwner {\n        bool success = paymentToken.transfer(owner, amount);\n        require(success, \"Withdrawal failed\");\n\n        emit Withdrawal(owner, amount);\n    }\n\n    receive() external payable {}\n}\n"
      }
    }
  }
}